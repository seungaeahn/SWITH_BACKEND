
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "lm.swith.main.mapper.StudyPostMapper">


	<!-- 스터디 전체 목록 -->
	<!-- 스터디 포스트 및 기술 스택 정보 조회 -->	
    <resultMap type="lm.swith.main.model.Skill" id="SkillResult">
        <id property="skill_no" column="skill_no"/>
        <result property="skill_name" column="skill_name"/>
        <result property="skill_img" column="skill_img"/>
    </resultMap>

    <resultMap type="lm.swith.main.model.PostTechStacks" id="PostTechStackReuslt">
        <result property="post_no" column="POST_NO" />
        <result property="skill_no" column="SKILL_NO" />
    </resultMap>
    
    <resultMap type="lm.swith.main.model.Users" id="UsersResult">
    	<id property="user_no" column="user_no" />
    	<result property="email" column="email" />
    	<result property="nickname" column="nickname" />
    	<result property="user_password" column="user_password" />
    	<result property="user_name" column="user_name" />
    	<result property="user_profile" column="user_profile" />
    	<result property="user_introduction" column="user_introduction" />
    	<result property="user_role" column="user_role" />
    </resultMap>

    <resultMap type="lm.swith.main.model.StudyPost" id="studyPostWithSkills">
        <id property="post_no" column="POST_NO" />
        <result property="user_no" column="USER_NO" />
        <result property="nickname" column="NICKNAME" />
        <result property="study_title" column="STUDY_TITLE" />
        <result property="study_content" column="STUDY_CONTENT" />
        <result property="study_method" column="STUDY_METHOD" />
        <result property="recruit_type" column="RECRUIT_TYPE" />
        <result property="study_date" column="STUDY_DATE" />
        <result property="recruit_deadline" column="RECRUIT_DEADLINE" />
        <result property="study_status" column="STUDY_STATUS" />
        <result property="study_likes" column="STUDY_LIKES" />
        <result property="study_place" column="STUDY_PLACE" />
        <result property="study_post_time" column="STUDY_POST_TIME" />
        <association property="user" resultMap="UsersResult"/>
        <collection property="studyPostWithSkills" resultMap="SkillResult"/>
    </resultMap>
    
    <resultMap type="lm.swith.main.model.Cafes" id="findCafesAll">
    	<result property="bplcm" column="BPLCNM" />
    	<result property="sitewhladdr" column="SITEWHLADDR" />
    	<result property="x" column="X" />
    	<result property="y" column="Y" />
	</resultMap>

	<select id="getAllStudyPostWithSkills" resultMap="studyPostWithSkills">
	    SELECT sp.*, s.skill_name, s.skill_img, u.email as USER_EMAIL, u.nickname as USER_NICKNAME
	    FROM STUDY_POST sp
	    LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
	    LEFT JOIN skill s ON pts.skill_no = s.skill_no
	    LEFT JOIN users u ON sp.user_no = u.user_no
	</select>

	
	
	
	<!-- 스터디 상세 페이지 -->
	<!-- 특정 post_no에 해당하는 스터디 포스트 및 기술 스택 정보 조회 -->
	<select id="getStudyPostByPostNo" resultMap="studyPostWithSkills">
	    SELECT sp.*, s.skill_name, s.skill_img
	    FROM study_post sp
	    LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
	    LEFT JOIN skill s ON pts.skill_no = s.skill_no
	    WHERE sp.post_no = #{post_no}
	</select>
	
	
	
	
	
	<!-- 스터디 등록 -->
	<insert id="insertStudyPost" parameterType="lm.swith.main.model.StudyPost">
	    <selectKey keyProperty="post_no" resultType="Long" order="BEFORE">
	        SELECT post_no_seq.NEXTVAL FROM DUAL
	    </selectKey>
	    
	    <!-- 첫 번째 쿼리: study_post 테이블에 스터디 정보 삽입 -->
	    INSERT INTO study_post (
	        POST_NO, USER_NO, STUDY_TITLE, STUDY_CONTENT,
	        STUDY_METHOD, RECRUIT_TYPE, STUDY_PERIOD,
	        STUDY_START, RECRUIT_DEADLINE, STUDY_STATUS,
	        STUDY_LIKES, STUDY_LOCATION, STUDY_PLACE, STUDY_POST_TIME
	    ) VALUES (
	        #{post_no}, #{user_no}, #{study_title}, #{study_content},
	        #{study_method}, #{recruit_type}, #{study_period},
	        #{study_start}, #{recruit_deadline}, #{study_status},
	        #{study_likes}, #{study_location}, #{study_place}, SYSDATE
	    )
	
	    <!-- 두 번째 쿼리: post_tech_stacks 테이블에 기술 스택 정보 삽입 -->
	    <foreach collection="skills" item="skill" separator=";">
	        INSERT INTO post_tech_stacks (post_no, skill_no)
	        VALUES (#{post_no}, #{skill})
	    </foreach>
	
	    <!-- 세 번째 쿼리: users 테이블에서 nickname 정보 가져와서 업데이트 -->
	    UPDATE study_post sp
	    SET sp.nickname = (SELECT nickname FROM users u WHERE u.user_no = sp.user_no)
	    WHERE sp.post_no = #{post_no}
	</insert>
	
	
	
	
	
	<!-- 조건 select 문 parameterType="Map" -->
	<select id="getStudiesbySelect" parameterType="String" resultType="lm.swith.main.model.StudyPost">
    SELECT DISTINCT *
    FROM (
        <!-- 기술스택별 스터디 목록 -->
        SELECT sp.*
        FROM study_post sp
        JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
        WHERE pts.skill_no = #{skill_no}

        UNION

        <!-- 모집구분별 스터디 목록 -->
        SELECT *
        FROM study_post
        WHERE recruit_type = #{recruit_type}

        UNION

        <!-- 진행방식별 스터디 목록 -->
        SELECT *
        FROM study_post
        WHERE study_method = #{study_method}

        UNION

        <!-- 지역별 스터디 목록 -->
        SELECT *
        FROM study_post 
        WHERE study_location = #{study_location}
    ) AS uniqueStudies
	</select>
	
	
	
	<!-- 키워드 검색결과 스터디 목록 -->
	<select id="getStudiesByKeyword" resultType="lm.swith.main.model.StudyPost">
	    SELECT * FROM study_post 
	    WHERE study_title LIKE '%' || #{keyword} || '%'
	    OR study_content LIKE '%' || #{keyword} || '%'
	</select>
	
	
	
	<!-- 스터디 수정 -->
	<update id="updateStudyPost" parameterType="lm.swith.main.model.StudyPost">
	    <!-- 첫 번째 쿼리: study_post 테이블에 스터디 정보 업데이트 -->
	    UPDATE study_post
	    SET
	        USER_NO = #{user_no},
	        STUDY_TITLE = #{study_title},
	        STUDY_CONTENT = #{study_content},
	        STUDY_METHOD = #{study_method},
	        RECRUIT_TYPE = #{recruit_type},
	        STUDY_PERIOD = #{study_period},
	        STUDY_START = #{study_start},
	        RECRUIT_DEADLINE = #{recruit_deadline},
	        STUDY_STATUS = #{study_status},
	        STUDY_LOCATION = #{study_location},
	        STUDY_PLACE = #{study_place},
	        STUDY_POST_TIME = SYSDATE
	    WHERE POST_NO = #{post_no} AND USER_NO = #{user_no};
	    
	
	    <!-- 두 번째 쿼리: 기술 스택 정보 업데이트 기존 스킬 정보를 삭제 후 다시 저장 -->
	    DELETE FROM post_tech_stacks WHERE post_no = #{post_no};
	    <foreach collection="skills" item="skill" separator=";">
	        INSERT INTO post_tech_stacks (post_no, skill_no) VALUES (#{post_no}, #{skill});
	    </foreach>
	
	    <!-- 세 번째 쿼리: users 테이블에서 nickname 정보 가져와서 업데이트 
	    UPDATE study_post sp
	    SET sp.nickname = (SELECT nickname FROM users u WHERE u.user_no = sp.user_no)
	    WHERE sp.post_no = #{post_no};-->
	</update>



	<!-- 스터디 삭제 -->
	<delete id="deleteStudyPost" parameterType="Long">
	    <!-- 첫 번째 쿼리: study_post 테이블에서 해당 post_no에 대한 스터디 정보 삭제 -->
	    DELETE FROM study_post WHERE post_no = #{post_no} AND user_no = #{user_no};
	    
	    <!-- 두 번째 쿼리: post_tech_stacks 테이블에서 해당 post_no에 대한 기술 스택 정보 삭제 -->
	    DELETE FROM post_tech_stacks WHERE post_no = #{post_no}
	</delete>
	
	
	<!-- 게시글 작성시 카페 목록 검색 -->
	<select id="searchCafes" resultType="lm.swith.main.model.Cafes">
	    SELECT * FROM cafes 
	    WHERE bplcnm LIKE '%' || #{keyword} || '%'
	    OR sitewhladdr LIKE '%' || #{keyword} || '%'
	</select>
	
	<!-- 카페목록 모두 가져오기 -->
	<select id="getAllCafes" resultType="lm.swith.main.model.Cafes">
	    SELECT * FROM CAFES 
	</select>
</mapper>
















